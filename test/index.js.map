{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\nimport path from 'path'\r\nimport { expect } from 'chai'\r\nimport Promise from 'bluebird'\r\nimport request from 'superagent'\r\nimport wrapper from '@pact-foundation/pact-node'\r\n\r\n//import { default as Pact } from 'pact'\r\nimport  Pact  from 'pact'\r\n\r\ndescribe('Pact random mock port', () => {\r\n\r\n  const MOCK_PORT = Math.floor(Math.random() * 999) + 9000\r\n  const PROVIDER_URL = `http://localhost:${MOCK_PORT}`\r\n// const PROVIDER_URL = `http://localhost:9700`\r\n  const mockServer = wrapper.createServer({\r\n    port: MOCK_PORT,\r\n    log: path.resolve(process.cwd(), 'logs', 'mockserver-integration.log'),\r\n    dir: path.resolve(process.cwd(), 'pacts'),\r\n    spec: 2\r\n  });\r\n\r\n\r\n  var servers = wrapper.listServers();\r\nconsole.log(JSON.stringify(servers));\r\n\r\n\r\n  wrapper.logLevel('debug');\r\n\r\n  const EXPECTED_BODY = [{\r\n    id: 1,\r\n    name: 'Project 1',\r\n    due: '2016-02-11T09:46:56.023Z',\r\n    tasks: [\r\n      {id: 1, name: 'Do the laundry', 'done': true},\r\n      {id: 2, name: 'Do the dishes', 'done': false},\r\n      {id: 3, name: 'Do the backyard', 'done': false},\r\n      {id: 4, name: 'Do nothing', 'done': false}\r\n    ]\r\n  }]\r\n\r\n  var provider, counter = 1\r\n\r\n  after(() => {\r\n    wrapper.removeAllServers()\r\n  })\r\n\r\n  beforeEach((done) => {\r\n    mockServer.start().then(function afterStart() {\r\n      console.log(\"function after start\");\r\n      provider = Pact({ consumer: `Consumer ${counter}`, provider: `Provider ${counter}`, port: MOCK_PORT });\r\n      done();\r\n    })\r\n  })\r\n\r\n  afterEach((done) => {\r\n    mockServer.delete().then(() => {\r\n      counter++\r\n      done()\r\n    })\r\n  })\r\n\r\n  context('with a single request', () => {\r\n\r\n    // add interactions, as many as needed\r\n    beforeEach((done) => {\r\n      provider.addInteraction({\r\n        state: 'i have a list of projects',\r\n        uponReceiving: 'a request for projects',\r\n        withRequest: {\r\n          method: 'get',\r\n          path: '/projects',\r\n          headers: { 'Accept': 'application/json' }\r\n        },\r\n        willRespondWith: {\r\n          status: 200,\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: EXPECTED_BODY\r\n        }\r\n      }).then(() => done())\r\n    })\r\n\r\n    // once test is run, write pact and remove interactions\r\n    afterEach((done) => {\r\n      provider.finalize().then(() => done())\r\n    })\r\n\r\n    // execute your assertions\r\n    it('successfully verifies', (done) => {\r\n      const verificationPromise = request\r\n        .get(`${PROVIDER_URL}/projects`)\r\n        .set({ 'Accept': 'application/json' })\r\n        .then(provider.verify)\r\n\r\n      expect(verificationPromise).to.eventually.eql(JSON.stringify(EXPECTED_BODY)).notify(done)\r\n    })\r\n  })\r\n\r\n  context('with two requests', () => {\r\n\r\n    beforeEach((done) => {\r\n      let interaction1 = provider.addInteraction({\r\n        state: 'i have a list of projects',\r\n        uponReceiving: 'a request for projects',\r\n        withRequest: {\r\n          method: 'get',\r\n          path: '/projects',\r\n          headers: { 'Accept': 'application/json' }\r\n        },\r\n        willRespondWith: {\r\n          status: 200,\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: EXPECTED_BODY\r\n        }\r\n      })\r\n\r\n      let interaction2 = provider.addInteraction({\r\n        state: 'i have a list of projects',\r\n        uponReceiving: 'a request for a project that does not exist',\r\n        withRequest: {\r\n          method: 'get',\r\n          path: '/projects/2',\r\n          headers: { 'Accept': 'application/json' }\r\n        },\r\n        willRespondWith: {\r\n          status: 404,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      })\r\n\r\n      Promise.all([interaction1, interaction2]).then(() => done())\r\n    })\r\n\r\n    // once test is run, write pact and remove interactions\r\n    afterEach((done) => {\r\n      provider.finalize().then(() => done())\r\n    })\r\n\r\n    it('successfully verifies', (done) => {\r\n      let promiseResults = []\r\n\r\n      const verificationPromise =\r\n          request.get(`${PROVIDER_URL}/projects`)\r\n            .set({ 'Accept': 'application/json' })\r\n            .then((response) => {\r\n              promiseResults.push(response)\r\n              return request.get(`${PROVIDER_URL}/projects/2`).set({ 'Accept': 'application/json' })\r\n            })\r\n            .then(() => {}, (err) => { promiseResults.push(err.response) })\r\n            .then(() => provider.verify(promiseResults))\r\n\r\n      expect(verificationPromise).to.eventually.eql([JSON.stringify(EXPECTED_BODY), '']).notify(done)\r\n    })\r\n  })\r\n\r\n  context('with an unexpected interaction', () => {\r\n    // add interactions, as many as needed\r\n    beforeEach((done) => {\r\n      provider.addInteraction({\r\n        state: 'i have a list of projects',\r\n        uponReceiving: 'a request for projects',\r\n        withRequest: {\r\n          method: 'get',\r\n          path: '/projects',\r\n          headers: { 'Accept': 'application/json' }\r\n        },\r\n        willRespondWith: {\r\n          status: 200,\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: EXPECTED_BODY\r\n        }\r\n      }).then(() => done())\r\n    })\r\n\r\n    // once test is run, write pact and remove interactions\r\n    afterEach((done) => {\r\n      provider.finalize().then(() => done())\r\n    })\r\n\r\n    it('fails verification', (done) => {\r\n      let promiseResults = []\r\n\r\n      const verificationPromise =\r\n        request.get(`${PROVIDER_URL}/projects`)\r\n          .set({ 'Accept': 'application/json' })\r\n          .then((response) => {\r\n            promiseResults.push(response)\r\n            return request.delete(`${PROVIDER_URL}/projects/2`)\r\n          })\r\n          .then(() => {}, (err) => { promiseResults.push(err.response) })\r\n          .then(() => provider.verify(promiseResults))\r\n\r\n      expect(verificationPromise).to.be.rejectedWith('No interaction found for DELETE /projects/2').notify(done)\r\n    })\r\n  })\r\n\r\n})"]}